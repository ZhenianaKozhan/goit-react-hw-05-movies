{"version":3,"file":"static/js/918.f393e2ba.chunk.js","mappings":"oLAEaA,E,OAAOC,GAAAA,GAAH,wF,yJCAJC,E,OAAYD,GAAAA,IAAH,4H,kCCgEtB,EA1DqB,WAAO,IAAD,IACjBE,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACjB,GAAgCC,EAAAA,EAAAA,UAAS,MAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACMC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACN,EAASO,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAU3D,OARAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,WAA+BC,GAA/B,wFACyBC,EAAAA,EAAAA,IAAWD,GADpC,OACQE,EADR,OAEER,EAAYQ,GAFd,4CADc,uBAAC,SAAD,2BAKdC,CAAgBf,EACjB,GAAE,CAACA,KAGF,iBAAKgB,MAAO,CAAEC,QAAS,IAAvB,WACE,UAAC,IAAD,CAAYC,GAAIX,EAAoBY,QAApC,WACE,SAAC,KAAD,IADF,cAGCd,IACC,UAACN,EAAD,YACE,gBACEqB,IAAG,0CAAqCf,EAASgB,aACjDC,IAAKjB,EAASkB,MACdC,MAAM,MACNC,OAAO,SAET,4BACE,kCAAQpB,EAASkB,MAAjB,aAA2BlB,EAASqB,aAAaC,MAC/C,EACA,GAFF,QAIA,yCAAyC,GAAxBtB,EAASuB,cAAmBC,QAAQ,GAAK,QAC1D,sCACA,uBAAIxB,EAASyB,YACb,oCACA,uBAAIzB,EAAS0B,OAAOC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,IAAT,IAAeC,KAAK,cAItD,UAAC,IAAD,YACE,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMjB,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,8BAIN,SAAC,EAAAkB,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,QAIP,C,+LC3DDC,EAAAA,EAAAA,SAAAA,QAHiB,+BAIjBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAJc,mCAKdC,SAAU,SAGL,IAAMC,EAAO,mCAAG,WAAM7B,GAAN,gGAED0B,EAAAA,EAAAA,IAAA,iBAAoB1B,EAApB,aAFC,cAEb8B,EAFa,yBAGZA,EAAIC,KAAKC,MAHG,gCAKnBC,QAAQC,IAAR,MALmB,yDAAH,sDASPjC,EAAU,mCAAG,WAAMD,GAAN,gGAEJ0B,EAAAA,EAAAA,IAAA,iBAAoB1B,IAFhB,cAEhB8B,EAFgB,yBAGfA,EAAIC,MAHW,gCAKtBE,QAAQC,IAAR,MALsB,yDAAH,sDASVC,EAAQ,mCAAG,WAAMC,GAAN,gFAChBC,EAAS,CACbC,OAAQ,CACNF,MAAOA,EACPG,KAAM,IAJY,kBASFb,EAAAA,EAAAA,IAAA,gBAA2BW,GATzB,cASdP,EATc,yBAUbA,EAAIC,KAAKS,SAVI,gCAYpBP,QAAQC,IAAR,MAZoB,yDAAH,sDAgBRO,EAAW,mCAAG,oGACPf,EAAAA,EAAAA,IAAA,uBADO,cACnBI,EADmB,yBAElBA,EAAIC,KAAKS,SAFS,2CAAH,qDAKXE,EAAU,mCAAG,WAAM1C,GAAN,gGAEJ0B,EAAAA,EAAAA,IAAA,iBAAoB1B,EAApB,aAFI,cAEhB8B,EAFgB,yBAGfA,EAAIC,KAAKS,SAHM,gCAKtBP,QAAQC,IAAR,MALsB,yDAAH,qD","sources":["components/Cast/Cast.styled.js","components/MovieDetails/MovieDetails.styled.js","components/MovieDetails/MovieDetails.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 12px;\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n`;\n","import styled from 'styled-components';\n\nexport const MovieCard = styled.div`\n  display: flex;\n  gap: 12px;\n  margin-top: 12px;\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n`;\n","import { Suspense, useEffect, useRef, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { getDetails } from 'services/api';\nimport { MovieCard } from './MovieDetails.styled';\nimport { IoMdArrowRoundBack } from 'react-icons/io';\nimport { LinkStyled } from '../Header/Header.styled';\nimport { List } from 'components/Cast/Cast.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n  const [filmCard, setFilmCard] = useState(null);\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    async function loadFilmDetails(id) {\n      const response = await getDetails(id);\n      setFilmCard(response);\n    }\n    loadFilmDetails(movieId);\n  }, [movieId]);\n\n  return (\n    <div style={{ padding: 16 }}>\n      <LinkStyled to={backLinkLocationRef.current}>\n        <IoMdArrowRoundBack /> Go back\n      </LinkStyled>\n      {filmCard && (\n        <MovieCard>\n          <img\n            src={`https://image.tmdb.org/t/p/w500/${filmCard.poster_path}`}\n            alt={filmCard.title}\n            width=\"280\"\n            height=\"360\"\n          />\n          <div>\n            <h2>{`${filmCard.title} (${filmCard.release_date.slice(\n              0,\n              4\n            )})`}</h2>\n            <p>User Score: {(filmCard.vote_average * 10).toFixed(0) + '%'}</p>\n            <h4>Overview</h4>\n            <p>{filmCard.overview}</p>\n            <h4>Genres</h4>\n            <p>{filmCard.genres.map(item => item.name).join(' ')}</p>\n          </div>\n        </MovieCard>\n      )}\n      <List>\n        <h4>Additional information</h4>\n        <ul>\n          <li>\n            <Link to=\"cast\">Cast</Link>\n          </li>\n          <li>\n            <Link to=\"reviews\">Reviews</Link>\n          </li>\n        </ul>\n      </List>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '1f61c5c3e341d3551f825cc6aeed2125';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: 'en-US',\n};\n\nexport const getCast = async id => {\n  try {\n    const res = await axios.get(`/movie/${id}/credits`);\n    return res.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getDetails = async id => {\n  try {\n    const res = await axios.get(`/movie/${id}`);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getQuery = async query => {\n  const config = {\n    params: {\n      query: query,\n      page: 1,\n    },\n  };\n\n  try {\n    const res = await axios.get(`/search/movie`, config);\n    return res.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getTrending = async () => {\n  const res = await axios.get(`/trending/movie/day`);\n  return res.data.results;\n};\n\nexport const getReviews = async id => {\n  try {\n    const res = await axios.get(`/movie/${id}/reviews`);\n    return res.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["List","styled","MovieCard","movieId","useParams","location","useLocation","useState","filmCard","setFilmCard","backLinkLocationRef","useRef","state","from","useEffect","id","getDetails","response","loadFilmDetails","style","padding","to","current","src","poster_path","alt","title","width","height","release_date","slice","vote_average","toFixed","overview","genres","map","item","name","join","Suspense","fallback","axios","api_key","language","getCast","res","data","cast","console","log","getQuery","query","config","params","page","results","getTrending","getReviews"],"sourceRoot":""}